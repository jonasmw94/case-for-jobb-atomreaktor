@{
    ViewData["Title"] = "Hovedside";
}

<script>
    let powerIndex = 0;
    function updatePowerOutput(title, newPowerIndex) {
        document.getElementById('active-p').innerHTML = `Nåværende aktiv: <strong>${title}</strong>`;
        powerIndex = newPowerIndex;
    }
</script>

<div class="text-center">
    <h1 class="display-4">Atomreaktoren</h1>
    <p style="width: 100%; text-align: left; margin-bottom: 4px; margin-top: 0px;">Kraftproduksjonskrav: </p>
    <div style="display: flex; flex-direction: row;">
        <button onclick="updatePowerOutput('Lav', 0)" id="b1" style="margin-left: 10px; border: none; background: none; border-radius: 10px; color: #fff; background-color: #000; padding: 6px;">
            Lav
        </button>
        <button onclick="updatePowerOutput('Medium', 1)" id="b2" style="margin-left: 10px; border: none; background: none; border-radius: 10px; color: #fff; background-color: #000; padding: 6px;">
            Medium
        </button>
        <button onclick="updatePowerOutput('Høy', 2)" id="b3" style="margin-left: 10px; border: none; background: none; border-radius: 10px; color: #fff; background-color: #000; padding: 6px; ">
            Høy
        </button>

    </div>
        <p style="width: 100%; text-align: left;" id="active-p">Aktivt nivå: <strong>Lav</strong></p>
    <div>
        <canvas id="myChart"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        var json = @Json.Serialize(Model);
        let chartXValues = json.map((elem, idx) => elem.time);
        let pressureDataPoints = json.map((elem, idx) => elem.pressure);
        let productionLevelDataPointsPercent = json.map((elem, idx) => (elem.powerOutputLevelAtTime + 1) / 3.0);

        const ctx = document.getElementById('myChart');
        const labels = chartXValues;
        const data = {
            labels: labels,
            datasets: [{
                label: 'Trykk i atomkraftverket (prosent)',
                data: pressureDataPoints,
                fill: false,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
            },
            {
                label: 'Kraftproduksjonsnivå (prosent)',
                data: productionLevelDataPointsPercent,
                fill: false,
                borderColor: 'rgb(192, 75, 192)',
                tension: 0.1
                }],
            options: {
                scales: {
                    y: {
                        min: 0.0,
                        max: 1.0
                    }
                }
            }
        };
        const config = {
            type: 'line',
            data: data,
        };

        let myChart = new Chart(ctx, config);

        function updateChartValues() {
            fetch('/api/reactor-simulator/simulate', {
                method: 'POST',
                body: JSON.stringify({ steps: 5, timePerStepSeconds: 0.5, reactorPowerOutputLevel: powerIndex }),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
                .then(res => {
                    fetch("/api/reactor-simulator/pressure-history")
                        .then((response) => response.json())
                        .then((resJson) => {
                            myChart.data.labels = resJson.map((elem, idx) => elem.time);
                            myChart.data.datasets[0].data = resJson.map((elem, idx) => elem.pressure);
                            myChart.data.datasets[1].data = productionLevelDataPointsPercent = resJson.map((elem, idx) => (elem.powerOutputLevelAtTime + 1) / 3.0);
                            myChart.update();
                            if (myChart.data.labels.length > 180) {
                                myChart.options.animation = false;
                            }
                        });
                });
        }

        let interval;

        function stopOrStartPolling() {
            if (!interval) {
                interval = setInterval(() => {
                    updateChartValues();
                }, 2000);
                document.getElementById('start-button').innerHTML = `Stopp automatisk simulering`;
            } else {
                clearInterval(interval);
                interval = undefined;
                document.getElementById('start-button').innerHTML = `Start automatisk simulering`;
            }
        }
    </script>
    <div style="display: flex; flex-direction: row;">
        <button onclick="if (!interval) { updateChartValues() }"  style="margin-top: 20px; margin-left: 10px; border: none; background: none; border-radius: 10px; color: #fff; background-color: #000; padding: 6px;">
            Last nye steg
        </button>
        <button id="start-button" onclick="stopOrStartPolling()" style="margin-top: 20px; margin-left: 10px; border: none; background: none; border-radius: 10px; color: #fff; background-color: #000; padding: 6px;">
            Start automatisk simulering
        </button>
</div>

